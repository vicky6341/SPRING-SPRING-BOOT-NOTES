->DataSource - how we are connecting to a database.
             - In order to connect java application with the databaase.It needs datasource.
             - Datasource internally manages the connections.

->Add hibernate-core dependency to the pom.

1)hibernate.cfg.xml:
<?xml..................>
<DOCTYPEf ..............>
<hibernate-configuration>
  <session-factory>
    <property name="hibernate.connection.url">jdbc:mysql://localhost:3306/hibernate-morning</property>
    <property name="hibernate.connection.username">root</property>
    <property name="hibernate.connection.password">vivek</property>
    <property name="hibernate.connection.driver_class">com.mysql.cj.jdbc.Driver</property>
  </session-factory>
</hibernate-configuration>

->Inorder to work with hiberate ,we have to do the following :
  ->First we need session object to perform database operations with hibernate.
  ->Inorder to initialize the session object,we need session factory.
  ->To create a sessionFactory we need some configurations regarding the database.

2)code:
p s v m(s[] srgs)
{
    //create configuration
    Configuration con=new Configuration();
    con.configure("hibernate.connection.cfg.xml");
    con.addAnnotatedClass(Song.class);

    //create sessionFactory
    SessionFactory sf=con.buildSessionFactory();

    //initialize the session object
    Session s=sf.openSession();

    Song s1=new Song();
    s1.setId(1);
    s1.setSongName("rim zim");
    s1.setArtist("vivek");
    
    session.beginTransaction();
    session.save(s1);
    session.getTransaction().commit();
}

3)entity: This entity represents table in a database.

@Entity -------------->javax.persistence.Entity
public class Song{

    @Id  --------------->javax.persistence.Id
    @Column(name="songId")
    private int id;
    
    @Column(name="songName")
    private String songName;

    @Column(name="singer")
    private String artist;

    setters and getters....
}

->If we configure the  following property in hibernate.cfg,xml,Then it will enable logging of generate sql to the console.
   
   [ <Property name="hibernate.show_sql"> true</property> ]

->we no need to give "hibernate.cfg.xml" as a parameter to configure.It will always look for that file ,if don't pass as a parameter.
  But,If we name it with different name we should pass the parameter.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
session.get(Song.class,2) -> will get the record based on song id with value '2'
session.load(Song.class,2) ->It will also do the same.
->Inorder to update and delete any record,we have to load that record first.
ex:
   1)Song s=session.get(Song.class,1);
     s.setName("....");
     session.update(s);
   2)Song s=session.get(Song.class,1);
     session.beginTransaction();
     session.delete(s);
     session.getTransaction().commit();

->As SessionFactory object is heavy weight obj,we have to create only one SessionFactory in our application.
 So,we can make a Singleton util class that is having a method which returns only one SessionFactory object everytime.

public class HibernateUtils
{
      private static SessionFactory sf=null;
      public static SessionFactory getSessionFactory()
      {
        if(sf==null)
        {
            Configuration con=new Configuration();
            con.configure();
            con.addAnnotatedClass(Song.class);

            sf=con.buildSessionFactory();
        }
        return sf;
      }
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
->@GeneratedValue(strategy=GenerationType.IDENTITY) which indicates that db is responsible to generate primary key and map that key to the id of an entity.
ex:
  session.beginTransaction();    
  session.save(obj);                   ---->(1)
  session.getTransaction().commit();   ---->(2)
       ->after executing the line (1) data will not be saved into actual db.It will be persisted after commiting only it will be saved into the db.
       ->While executing the line (1) itself the hibernate will generate the query but the data will not be saved into db.

->In Hibernate, an object can be in one of three states: transient, persistent, or detached. These states define the lifecycle of a Hibernate-managed entity 
and dictate how Hibernate manages the object's lifecycle with respect to the database. Here's a detailed explanation of each state:
1)Transient State: An object is in the transient state when it is created but not yet associated with a Hibernate session. 
                   It does not have a corresponding record in the database, and Hibernate is not aware of its existence.
->Creation: The object is created using the new operator.
->No Database Representation: There is no corresponding row in the database.
->Not Managed by Hibernate: Hibernate does not track changes to this object.

 ex:
        // Create a transient object
        User user = new User();
        user.setName("John Doe");
        user.setEmail("john.doe@example.com");
    
2)Persistent State:An object is in the persistent state when it is associated with an active Hibernate session. 
                  Hibernate tracks changes to the object and synchronizes these changes with the database.

->Managed by Hibernate: The object is associated with a session, and Hibernate tracks its state.
->Database Representation: There is a corresponding row in the database.
->Automatic Synchronization: Changes to the object's properties are automatically synchronized with the database.

ex:
                Session session = sessionFactory.openSession();
                session.beginTransaction();

                // The object is now in the persistent state
                session.save(user);  // user becomes persistent

                // Changes to the object are automatically saved to the database
                user.setEmail("new.email@example.com");

                session.getTransaction().commit();
                session.close();

3) Detached State:An object is in the detached state when it was once associated with a Hibernate session but is no longer associated with any session.
                   The object is no longer being tracked by Hibernate.

->Previously Persistent: The object was once in the persistent state but the session has been closed or cleared.
->No Longer Managed: Hibernate is no longer tracking changes to the object.
->Manual Synchronization: Changes to the object's properties are not automatically synchronized with the database.

 ex:
   
            // Assume the session is closed, user is now detached
            Session newSession = sessionFactory.openSession();
            newSession.beginTransaction();

            // Attach the detached object to a new session to make it persistent again
            newSession.update(user);
            user.setName("Updated Name");

            newSession.getTransaction().commit();
            newSession.close();

->Summary:
1)Transient State: The object is not associated with a session and not represented in the database.
2)Persistent State: The object is associated with an active session and is represented in the database. Changes to the object are automatically synchronized with the database.
3)Detached State: The object was previously persistent but is no longer associated with any session. Changes to the object are not synchronized with the database unless explicitly reattached to a session.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
->In Hibernate, dirty checking is a mechanism that automatically detects changes made to persistent objects and synchronizes those changes with the database.
This feature is only applicable to persistent objects, as transient objects are not managed by Hibernate and therefore do not participate in dirty checking.

->Dirty Checking with Persistent Objects:
   Dirty checking works with objects that are in the persistent state. When you modify a persistent object within a transaction, Hibernate keeps track of these changes and automatically updates the corresponding 
   database records when the transaction is committed.

Here's an example to illustrate dirty checking with a persistent object:
                Session session = sessionFactory.openSession();
                session.beginTransaction();

                // Load a persistent object from the database
                User user = session.get(User.class, 1);

                // Modify the persistent object
                user.setEmail("new.email@example.com");

                // No explicit update call is needed
                session.getTransaction().commit();
                session.close();

             In this example:  
                                When commit() is called, Hibernate performs dirty checking, detects the change, and generates the appropriate UPDATE SQL statement to synchronize the database with the 
                                in-memory state of the User object.

->Transient Objects and Dirty Checking:
   Transient objects are not managed by Hibernate, so dirty checking does not apply to them. Changes to transient objects are not tracked, and Hibernate will not
   synchronize these changes with the database unless the object is explicitly saved or persisted, transitioning it to a persistent state.

Here's an example to illustrate that dirty checking does not apply to transient objects:
 
                    // Create a transient object
                    User user = new User();
                    user.setName("John Doe");
                    user.setEmail("john.doe@example.com");

                    // Modify the transient object
                    user.setEmail("new.email@example.com");

                    // No session interaction, so no dirty checking occurs

->Summary:
1)Persistent Objects: Hibernate performs dirty checking on persistent objects. Changes made to these objects within a transaction are automatically detected and synchronized with the database when the transaction is committed.
2)Transient Objects: Transient objects are not managed by Hibernate. Changes to transient objects are not tracked, and dirty checking does not apply. To persist changes made to a transient object, it must be explicitly saved or persisted, transitioning it to a persistent state.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
<property name="hibernate.hbm2ddl.auto">create</property>
  ->The above property will help us to create a table in our db with hibernate framework.

ex:
   
    @Entity
    public class Student{

        @Id
        @GeneratedValue(strategy=GenerationType.IDENTITY)
        private String id;

        @Column(name="student_name)
        private String name;

        @Column(name="student_mobile)
        private long mobile;

        @Embedded          ----------->OPTIONAL
        private Address address;

        getters and setters.......

    }


    @Embeddable
    public class Address
    {
        @Column(name="address_line_1")
        public String addressLine1;

        @Column(name="address_line_2")
        public String addressLine2;

        @Column(name="city")
        public String city;

        getters and setters.........
    }

->In jpa terminology Address is embeddable object and in hibernate terminology Address is composite value type object.
->Student is an entity and Address is a value type.Becasue Student has an id and Address does'nt have an id.
->A value type always belongs to an enitty type.

1)Entities:Entities are objects that have their own lifecycle and identity. They are typically mapped to a database table, and each entity instance corresponds to a row in that table. Entities can be identified by a unique identifier (primary key).

Characteristics of Entities:
->Identity: Each entity has a unique identifier (primary key).
->Lifecycle: Entities have their own lifecycle managed by Hibernate (transient, persistent, detached).
->Persistence: Changes to entities are automatically synchronized with the database.
->Associations: Entities can have relationships with other entities (one-to-one, one-to-many, many-to-one, many-to-many).

ex:
            @Entity
            @Table(name = "users")
            public class User {
                @Id
                @GeneratedValue(strategy = GenerationType.IDENTITY)
                private Long id;
                
                private String name;
                private String email;
                
                // Getters and setters
            }

2)Value Types:Value types (also known as value objects or component types) do not have their own identity. They are usually dependent on an entity and are used to represent a part of an entity. Value types are embedded within an entity and do not exist independently.

Characteristics of Value Types:
->No Identity: Value types do not have a primary key.
->Dependent Lifecycle: The lifecycle of value types is tied to the lifecycle of the owning entity.
->Embeddable: Value types are embedded within entities and are not stored in separate tables.

ex:
        @Embeddable
        public class Address {
            private String street;
            private String city;
            private String zipcode;
            
            // Getters and setters
        }

        @Entity
        @Table(name = "users")
        public class User {
            @Id
            @GeneratedValue(strategy = GenerationType.IDENTITY)
            private Long id;
            
            private String name;
            private String email;
            
            @Embedded
            private Address address;
            
            // Getters and setters
        }

Summary:
->Entities: Have their own identity (primary key), lifecycle managed by Hibernate, can be persisted independently, and can have relationships with other entities.
->Value Types: Do not have an identity, their lifecycle is tied to the owning entity, are embedded within entities, and are used to represent parts of an entity.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

1)public class Address{

    public String addressline1;

    public String addressline2;

    public String city;

    public String country;
}


2)@Entity
public class Student{

    @Id
    @GeneratedValue(strategy=GenerationType.IDENTITY)
    private int id;

    @Column(name="student_name")
    private String name;

    @Embedded
    @AttributeOverrides({@AttributeOverride(name="addressline1",column=@Column(name="home_address_line1")),
                          @AttributeOverride(name="addressline2",column=@Column(name="home_address_line2")),
                          @AttributeOverride(name="city",column=@Column(name="home_city")),
                          @AttributeOverride(name="country",column=@Column(name="home_country"))})
    private Address homeAddress;

    @Embedded
    @AttributeOverrides({@AttributeOverride(name="addressline1",column=@Column(name="hostel_address_line1")),
                          @AttributeOverride(name="addressline2",column=@Column(name="hostel_address_line2")),
                          @AttributeOverride(name="city",column=@Column(name="hostel_city")),
                          @AttributeOverride(name="country",column=@Column(name="hostel_country"))})
    private Address hostelAddress;
}

->In the above example ,we are using the same Address object for home address and hostel address.
-------------------------------------------------------------------------------------------------------------------------------------------
->Hibernate is a vendor for JPA.
->HQL -Hibernate Query Language.
1)          {
                Query<Student> q=session.creteQuery("from Student s",Student.class);   ->Select all Student records
                List<Student> ls=q.list();
                for(Student s:ls)
                System.out.println(s);
            }

2)          {
                String hql="from Student s where s.age=?1";               ->findStudentByAge

                Query<Student> q=session.createQuery(hql,Student.class);
                q.setParameter(1,age);

                List<Student> ls=q.list();
                ls.forEach(System.out::println);
            }

3)          {
                String hql="from Student s where s.age=?1 and s.name=?2";               ->findStudentByAgeAndName

                Query<Student> q=session.createQuery(hql,Student.class);
                q.setParameter(1,age);
                q.setParameter(2,name);

                List<Student> ls=q.list();
                ls.forEach(System.out::println);
            }

3)          public static void findStudentByAge(int minAge,int maxAge)
            {
               String hql="from Student s where s.age between ?1 and ?2"
               Query<Student> q=session.creteQuery(hql,Student.class);
               q.setParameter(1,minAge);
               q.setParameter(2,maxAge);

               List<Student> ls=q.list();
               ls.forEach(System.out::println);
            }

4)          {
              Query<String> q=session.createQuery("select s.name from Student s",String.class);
              List<String> ls=q.list();

              for(String name:ls)
              {
                 System.out.println(name);
              }              
            }

5)          {
              Query<Object[]> q=session.createQuery("select s.name,s.age from Student s");
              List<Object[]> ls=q.list();
              for(Object obj:ls)
              {
                System.out.println(obj[0]+" "+obj[1]);
              }
            }

?1 replace with :var 
q.setParameter(1,age) -> q.setParameter("var",age)
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1)
   @Entity
   @NamedQuery(name="myapp.allstudents",query="from Student")
   public class Student{

    ....
    ....
    ....

   }
 
   public class Test{

    public static void findAll(){
        List<Student> studentList=session.createNamedQuery("myapp.allstudents",Student.class).list();
        studentList.forEach(system.out::println);
    }

   }

2)
          @Entity
          @NamedQuery(name="myapp.students.age",Query="from Student s where s.age=:age")
          public class Student{

            .....
            .....
            .....

          }

          public class Test{

            public static void findByAge(){
                List<Student> studentList=session.createNamedQuery("myapp.students.age",Student.class)
                                                .setParameter("age",33).list();
                studentList.forEach(System.out::println);
            }

          }

->If we want to define multiple named queries,We have to do it in the following way:

 @NamedQueries(

    value={

         @NamedQuery(name="myapp.students.age",Query="from Student s where s.age=:age"),
         @NamedQuery(name="myapp.allstudents",query="from Student")

    }

 )

 ->If we want to create a native query,We have to it in the following way:
   
1)   List<Student> studentList=session.createNativeQuery("select * from students where student_name='vivek'",Student.class);
2)   List<Student> studentList=session.createNativeQuery("select * from students where student_name='vivek can''t'",Student.class);
                 ->If we have single quote in name itself,we have to use two single quotes as mentioned above.

list() -> to get records.
executeUpdate() -> to update and delete records.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1)One To One Mapping:
    ->In one-one relationship,eigther of the primary key of two tables can act as foreign key of other table.
    ex: Student - passport  (student - owns - passport)

*Student Entity:

            @Entity
            @Table(name="Student")
            public class Student{

                @Id
                @GeneratedValue(strategy=GenerationType.IDENTITY)
                @Column(name="student_id")
                private int id;

                @Column(name="student_name")
                private String studentName;

                @OneToOne
                @JoinColumn(name="passport_id")
                private Passport passport;

            }

*Passport Entity:

        @entity
        @Table(name="Passport")
        public class Passport{

            @Id
            @GeneratedValue(strategy=GenerationType.IDENTITY)
            @Column(name="passport_id")
            private int id;

            @Column(name="passport_number")
            private String passportName;
        }

->If i want to save/delete the passport obj(child) while saving the Student obj(parent) then we have to do the following:
   
     @OneToOne(cascade=CascadeType.ALL)

->If we want to get parent obj data while fetching the data from child obj,we have to do the following:(BIDIRECTIONAL MAPPING)
 
    @Entity
    @Table(....)
    public class Passport{

        ....
        ...

        @OneToOne(mapppedBy="passport")   ->here the name passport will be the name of variable that was declared in the parent entity.
        private Student student;
    }
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


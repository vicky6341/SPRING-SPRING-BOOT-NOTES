->DataSource - how we are connecting to a database.
             - In order to connect java application with the databaase.It needs datasource.
             - Datasource internally manages the connections.

->Add hibernate-core dependency to the pom.

1)hibernate.cfg.xml:
<?xml..................>
<DOCTYPEf ..............>
<hibernate-configuration>
  <session-factory>
    <property name="hibernate.connection.url">jdbc:mysql://localhost:3306/hibernate-morning</property>
    <property name="hibernate.connection.username">root</property>
    <property name="hibernate.connection.password">vivek</property>
    <property name="hibernate.connection.driver_class">com.mysql.cj.jdbc.Driver</property>
  </session-factory>
</hibernate-configuration>

->Inorder to work with hiberate ,we have to do the following :
  ->First we need session object to perform database operations with hibernate.
  ->Inorder to initialize the session object,we need session factory.
  ->To create a sessionFactory we need some configurations regarding the database.

2)code:
p s v m(s[] srgs)
{
    //create configuration
    Configuration con=new Configuration();
    con.configure("hibernate.connection.cfg.xml");
    con.addAnnotatedClass(Song.class);

    //create sessionFactory
    SessionFactory sf=con.buildSessionFactory();

    //initialize the session object
    Session s=sf.openSession();

    Song s1=new Song();
    s1.setId(1);
    s1.setSongName("rim zim");
    s1.setArtist("vivek");
    
    session.beginTransaction();
    session.save(s1);
    session.getTransaction().commit();
}

3)entity: This entity represents table in a database.

@Entity -------------->javax.persistence.Entity
public class Song{

    @Id  --------------->javax.persistence.Id
    @Column(name="songId")
    private int id;
    
    @Column(name="songName")
    private String songName;

    @Column(name="singer")
    private String artist;

    setters and getters....
}

->If we configure the  following property in hibernate.cfg,xml,Then it will enable logging of generate sql to the console.
   
   [ <Property name="hibernate.show_sql"> true</property> ]

->we no need to give "hibernate.cfg.xml" as a parameter to configure.It will always look for that file ,if don't pass as a parameter.
  But,If we name it with different name we should pass the parameter.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
session.get(Song.class,2) -> will get the record based on song id with value '2'
session.load(Song.class,2) ->It will also do the same.
->Inorder to update and delete any record,we have to load that record first.
ex:
   1)Song s=session.get(Song.class,1);
     s.setName("....");
     session.update(s);
   2)Song s=session.get(Song.class,1);
     session.beginTransaction();
     session.delete(s);
     session.getTransaction().commit();

->As SessionFactory object is heavy weight obj,we have to create only one SessionFactory in our application.
 So,we can make a Singleton util class that is having a method which returns only one SessionFactory object everytime.

public class HibernateUtils
{
      private static SessionFactory sf=null;
      public static SessionFactory getSessionFactory()
      {
        if(sf==null)
        {
            Configuration con=new Configuration();
            con.configure();
            con.addAnnotatedClass(Song.class);

            sf=con.buildSessionFactory();
        }
        return sf;
      }
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------